import { CarReader } from '@ipld/car'
import * as DID from '@ipld/dag-ucan/did'
import * as Delegation from '@ucanto/core/delegation'
import * as Signer from '@ucanto/principal/ed25519'
import * as Client from '@web3-storage/w3up-client'
import { StoreMemory } from '@web3-storage/w3up-client/stores/memory'
 
async function backend(did: string) {
  // Load client with specific private key
  const principal = Signer.parse(process.env.KEY!)
  const store = new StoreMemory()
  const client = await Client.create({ principal, store })
 
  // Add proof that this agent has been delegated capabilities on the space
  // broke the key in two or it doesn't fit in next env
  const proof = await parseProof(process.env.PROOF! + 'WgPlOg73vKN+uUKlm7aG3BV1hUeL6nrWTkY4hjZXhwGmgzocljZmN0gaFlc3BhY2WhZG5hbWVraGFja2ZzLW5lcm9jaXNzWCLtAaounRNQfvSxim7jvwBs8rYMe1iAgLKBuD4ayOTpAX6ZY3ByZoCOBgFxEiCAsu4nH53CMM98cgxeyS9gDEa2uP5qXsNarlmGLahB7Khhc1hE7aEDQEjitrZm47Smgh+OU4W3b1E2d6UNb81Ceix0ALBRgkMP7nNdK0p4Z+xUM4NfHPEEFNHvcpSxvnZ1TH9Ll2i7VglhdmUwLjkuMWNhdHSHomNjYW5nc3BhY2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZmJsb2IvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZ3N0b3JlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2Nhbmh1cGxvYWQvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuaGFjY2Vzcy8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5qZmlsZWNvaW4vKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZ3VzYWdlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2FjYXVkWCLtAb3+3XvloD5ToO97yjfrlCpZu2htwVdYVHi+p61k5GOIY2V4cBpoM6HJY2ZjdIGhZXNwYWNloWRuYW1la2hhY2tmcy1uZXJvY2lzc1gi7QGqLp0TUH70sYpu478AbPK2DHtYgICygbg+Gsjk6QF+mWNwcmaAjgYBcRIggLLuJx+dwjDPfHIMXskvYAxGtrj+al7DWq5Zhi2oQeyoYXNYRO2hA0BI4ra2ZuO0poIfjlOFt29RNnelDW/NQnosdACwUYJDD+5zXStKeGfsVDODXxzxBBTR73KUsb52dUx/S5dou1YJYXZlMC45LjFjYXR0h6JjY2FuZ3NwYWNlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmZibG9iLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmdzdG9yZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5odXBsb2FkLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmhhY2Nlc3MvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuamZpbGVjb2luLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2Nhbmd1c2FnZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhY2F1ZFgi7QG9/t175aA+U6Dve8o365QqWbtobcFXWFR4vqetZORjiGNleHAaaDOhyWNmY3SBoWVzcGFjZaFkbmFtZWtoYWNrZnMtbmVyb2Npc3NYIu0Bqi6dE1B+9LGKbuO/AGzytgx7WICAsoG4PhrI5OkBfpljcHJmgI4GAXESIICy7icfncIwz3xyDF7JL2AMRra4/mpew1quWYYtqEHsqGFzWETtoQNASOK2tmbjtKaCH45ThbdvUTZ3pQ1vzUJ6LHQAsFGCQw/uc10rSnhn7FQzg18c8QQU0e9ylLG+dnVMf0uXaLtWCWF2ZTAuOS4xY2F0dIeiY2NhbmdzcGFjZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5mYmxvYi8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5nc3RvcmUvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuaHVwbG9hZC8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5oYWNjZXNzLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmpmaWxlY29pbi8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5ndXNhZ2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYWNhdWRYIu0Bvf7de+WgPlOg73vKN+uUKlm7aG3BV1hUeL6nrWTkY4hjZXhwGmgzocljZmN0gaFlc3BhY2WhZG5hbWVraGFja2ZzLW5lcm9jaXNzWCLtAaounRNQfvSxim7jvwBs8rYMe1iAgLKBuD4ayOTpAX6ZY3ByZoCOBgFxEiCAsu4nH53CMM98cgxeyS9gDEa2uP5qXsNarlmGLahB7Khhc1hE7aEDQEjitrZm47Smgh+OU4W3b1E2d6UNb81Ceix0ALBRgkMP7nNdK0p4Z+xUM4NfHPEEFNHvcpSxvnZ1TH9Ll2i7VglhdmUwLjkuMWNhdHSHomNjYW5nc3BhY2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZmJsb2IvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZ3N0b3JlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2Nhbmh1cGxvYWQvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuaGFjY2Vzcy8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5qZmlsZWNvaW4vKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuZ3VzYWdlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2FjYXVkWCLtAb3+3XvloD5ToO97yjfrlCpZu2htwVdYVHi+p61k5GOIY2V4cBpoM6HJY2ZjdIGhZXNwYWNloWRuYW1la2hhY2tmcy1uZXJvY2lzc1gi7QGqLp0TUH70sYpu478AbPK2DHtYgICygbg+Gsjk6QF+mWNwcmaAjgYBcRIggLLuJx+dwjDPfHIMXskvYAxGtrj+al7DWq5Zhi2oQeyoYXNYRO2hA0BI4ra2ZuO0poIfjlOFt29RNnelDW/NQnosdACwUYJDD+5zXStKeGfsVDODXxzxBBTR73KUsb52dUx/S5dou1YJYXZlMC45LjFjYXR0h6JjY2FuZ3NwYWNlLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmZibG9iLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmdzdG9yZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5odXBsb2FkLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmhhY2Nlc3MvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuamZpbGVjb2luLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2Nhbmd1c2FnZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhY2F1ZFgi7QG9/t175aA+U6Dve8o365QqWbtobcFXWFR4vqetZORjiGNleHAaaDOhyWNmY3SBoWVzcGFjZaFkbmFtZWtoYWNrZnMtbmVyb2Npc3NYIu0Bqi6dE1B+9LGKbuO/AGzytgx7WICAsoG4PhrI5OkBfpljcHJmgKkIAXESIJvaRTigTUBracu3oAPSLN+cN7AMpDAfKvqgXpBinWfCqGFzWETtoQNAG3UNtx7SbNvordbTMJ6KLTmM4dS34L87k0FTxZ34uA0kBcSLCLpI8eAuwPNevOp+VdOFzTnns2G0zuhScp0GCmF2ZTAuOS4xY2F0dIeiY2NhbmdzcGFjZS8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5mYmxvYi8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5nc3RvcmUvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYaJjY2FuaHVwbG9hZC8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5oYWNjZXNzLypkd2l0aHg4ZGlkOmtleTp6Nk1rcXVhYVpIemVrZldheHU2dHBwc3ZhN3BCOEg0YnRIRE05azRaTWo4cFByc2GiY2NhbmpmaWxlY29pbi8qZHdpdGh4OGRpZDprZXk6ejZNa3F1YWFaSHpla2ZXYXh1NnRwcHN2YTdwQjhINGJ0SERNOWs0Wk1qOHBQcnNhomNjYW5ndXNhZ2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWtxdWFhWkh6ZWtmV2F4dTZ0cHBzdmE3cEI4SDRidEhETTlrNFpNajhwUHJzYWNhdWRYIu0BBUNfjuZ4MN1zeQA21M2I8EVSRd6HLzEeYLLum3OJgyljZXhw9mNmY3SBoWVzcGFjZaFkbmFtZWtoYWNrZnMtbmVyb2Npc3NYIu0Bvf7de+WgPlOg73vKN+uUKlm7aG3BV1hUeL6nrWTkY4hjcHJmh9gqWCUAAXESIICy7icfncIwz3xyDF7JL2AMRra4/mpew1quWYYtqEHs2CpYJQABcRIggLLuJx+dwjDPfHIMXskvYAxGtrj+al7DWq5Zhi2oQezYKlglAAFxEiCAsu4nH53CMM98cgxeyS9gDEa2uP5qXsNarlmGLahB7NgqWCUAAXESIICy7icfncIwz3xyDF7JL2AMRra4/mpew1quWYYtqEHs2CpYJQABcRIggLLuJx+dwjDPfHIMXskvYAxGtrj+al7DWq5Zhi2oQezYKlglAAFxEiCAsu4nH53CMM98cgxeyS9gDEa2uP5qXsNarlmGLahB7NgqWCUAAXESIICy7icfncIwz3xyDF7JL2AMRra4/mpew1quWYYtqEHs')
  const space = await client.addSpace(proof)
  await client.setCurrentSpace(space.did())
 
  // Create a delegation for a specific DID
  const audience = DID.parse(did)
  const abilities = ['store/add', 'upload/add']
  const expiration = Math.floor(Date.now() / 1000) + (60 * 3) // 3 minutes
  const delegation = await client.createDelegation(audience, abilities, { expiration })
 
  // Serialize the delegation and send it to the client
  const archive = await delegation.archive()
  console.log('delegating access to', did);
  return archive.ok
}
 
/** @param {string} data Base64 encoded CAR file */
async function parseProof(data:any) {
  const blocks:any = []
  const reader = await CarReader.fromBytes(Buffer.from(data, 'base64'))
  for await (const block of reader.blocks()) {
    blocks.push(block)
  }
  return Delegation.importDAG(blocks)
}

export async function POST(request:Request) {

  const apiKey = request.headers.get('x-api-key');
  if (!apiKey || apiKey !== process.env.STORAGE_DELEGATE_SECRET_KEY) {
    return new Response('invalid api key', {status:403});
  }
  const body = await request.json();
  const delegation = await backend(body.did);

  return new Response(Buffer.from(delegation!).toString('base64'), {
    status: 200
  })
}

export async function GET() {
  return new Response('happy', {
    status: 200
  })
}